services:
  backend:
    container_name: fpo-backend
    hostname: api
    build: ./backend
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  swagger-ui:
    container_name: fpo-swagger
    hostname: swagger
    image: swaggerapi/swagger-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SWAGGER_JSON_URL: ../api/swagger.json
    networks:
      - backend
    depends_on:
      - backend

  postgres:
    container_name: fpo-postgres
    hostname: postgres
    image: postgres:latest
    restart: unless-stopped
    environment:
      TZ: "GMT+2"
      PGTZ: "GMT+2"
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: pg_isready --dbname=${POSTGRES_DB} --username=${POSTGRES_USER} -h 127.0.0.1
      interval: 5s
    networks:
      - backend
    # volumes:
    #   - database:/var/lib/postgresql/data

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command:
      - migrate -path=/migrations -database postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable up
    volumes:
      - ./migrations:/migrations
    networks:
      - backend

  pgweb:
    container_name: fpo-pgweb
    hostname: pgweb
    restart: always
    image: sosedoff/pgweb
    environment:
      - PGWEB_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      - PGWEB_AUTH_USER
      - PGWEB_AUTH_PASS
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-vz", "127.0.0.1", "8081"]
      interval: 5s

  nginx-ssl:
    container_name: fpo-nginx
    build: ./frontend
    ports:
      - ${PORT}:80
      - 443:443
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default-ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./static/:/var/www/static/
    networks:
      - backend
    depends_on:
      - backend
      - pgweb
    profiles:
      - production

  nginx:
    container_name: fpo-nginx
    build: ./frontend
    ports:
      - "${PORT}:80"
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static/:/var/www/static/
    networks:
      - backend
    depends_on:
      - backend
      - pgweb
    profiles:
      - development

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 6h & wait $${!}; certbot renew; done'"
    profiles:
      - production

# volumes:
#   database:

networks:
  backend:
